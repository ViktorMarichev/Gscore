import React, { useEffect, useState } from "react";
import { NextPage } from "next";
import Head from "next/head";
import { useKeenSlider } from "keen-slider/react";
import MainLayout from "src/components/MainLayout";
import Container from "src/components/Container";
import styled from "styled-components";
import ProductView from "src/components/ProductView";
import { Products as ProductsApi } from "src/redux/api/products";
import ProductType from "../src/types/product";
import { useRouter } from "next/router";
import { NextPageContext } from "next";
import { wrapper } from "src/redux/store";
import { AxiosResponse } from "axios";
import { useAppDispatch } from "src/redux/store";
import { setProducts } from "src/redux/Products";
import Product from "src/types/product";
import { ResizePlugin } from "src/sliderPlugins";

type ProductsPageProps = {
  serverProducts: Array<ProductType>;
  props: any;
};

const ProductsPage: NextPage<ProductsPageProps> = ({ serverProducts }) => {
  const dispatch = useAppDispatch();
  const [products, setProductsState] = useState<Array<Product>>(serverProducts);
  const router = useRouter();
  const [refCallback, slider] = useKeenSlider(
    {
      initial: 0,
      created: (slider) => {
        if (slider.container.offsetWidth <= 960) {
          slider.options.disabled = false;
        }
      },
      loop: false,
      disabled: true,
      mode: "free-snap",
      breakpoints: {
        "(max-width: 960px)": {
          disabled: false,
          slides: {
            origin: "center",
            perView: 1,
          },
          range: {
            min: -1,
            max: 1,
          },
        },
        "(max-width: 780px)": {
          disabled: false,
          slides: {
            origin: "center",
            perView: 1,
          },
          range: {
            min: -1,
            max: 1,
          },
        },
      },
    },
    [
      (slider) => {
        if (typeof window != "undefined") {
          let timeout: ReturnType<typeof setTimeout>;
          let mouseOver = false;
          function clearNextTimeout() {
            clearTimeout(timeout);
          }
          function nextTimeout() {
            clearTimeout(timeout);
            if (mouseOver) return;

            timeout = setTimeout(() => {
              if (slider.track.details.abs === 1) {
                slider.moveToIdx(-1);
              } else {
                slider.next();
              }
            }, 2500);
          }
          slider.on("created", () => {
            slider.container.addEventListener("mouseover", () => {
              mouseOver = true;
              clearNextTimeout();
            });
            slider.container.addEventListener("mouseout", () => {
              mouseOver = false;
              nextTimeout();
            });

            nextTimeout();
          });
          slider.on("dragStarted", clearNextTimeout);
          slider.on("animationEnded", nextTimeout);
          slider.on("updated", nextTimeout);
        }
      },
    ]
  );

  useEffect(() => {
    async function loadProducts() {
      try {
        const res: AxiosResponse = await ProductsApi.getProducts();
        const data = res.data;
        setProductsState(data);
        dispatch(setProducts({ products: data }));
      } catch {
        loadProducts();
      }
    }
    if (serverProducts.length === 0) {
      loadProducts();
    } else {
      dispatch(setProducts({ products }));
    }

    if (typeof window !== "undefined") {
    }
  }, []);

  if (!products) {
    return (
      <>
        <Head>
          <title>Get started with Gscore today!</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Container>
          <Wrapper>
            <Title>Get started with Gscore today!</Title>
            Loading...
          </Wrapper>
        </Container>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Get started with Gscore today!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>
        <Wrapper>
          <Title>Get started with Gscore today!</Title>
          <Products ref={refCallback} className="keen-slider">
            {products.map((product: ProductType, index) => {
              return (
                <ProductViewWrapper
                  key={product.id}
                  className="keen-slider__slide"
                >
                  <ProductView
                    isActive={index == 1}
                    price={Number(product.prices[0].price)}
                    id={product.id}
                    name={product.name}
                    sitesCount={product.sitesCount}
                    selectProduct={() =>
                      router.push(
                        "/subscribing/[id]",
                        "/subscribing/" + product.id,
                        {
                          shallow: true,
                        }
                      )
                    }
                  />
                </ProductViewWrapper>
              );
            })}
          </Products>

          <Notice>
            Have more than 10 sites?
            <Ref>Contact us</Ref>
          </Notice>
        </Wrapper>
      </MainLayout>
    </>
  );
};

ProductsPage.getInitialProps = wrapper.getInitialPageProps(
  (store) => async (stx: NextPageContext) => {
    if (!stx.req) return { serverProducts: [] };
    // Fetch data from external API
    try {
      const res: AxiosResponse = await ProductsApi.getProducts();
      const data = res.data;
      //  store.dispatch(setProducts({ products: data }));
      // Pass data to the page via props
      return { serverProducts: data };
    } catch (error) {
      console.log("error.message");
      return { serverProducts: [] };
    }
  }
);
const Wrapper = styled.div`
  padding: 16px 0px 42px 0px;
  @media (max-width: 960px) {
  }
`;
const Title = styled.div`
  font-family: "THICCCBOI-bold";
  font-style: normal;
  font-size: 44px;
  color: #ffffff;
  width: 100%;
  text-align: center;
  padding-bottom: 98.23px;
  @media (max-width: 640px) {
    padding-bottom: 48.23px;
  }
`;
const Products = styled.div`
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
`;
const ProductViewWrapper = styled.div`
  padding-right: calc(10px + (12.5 - 10) * ((100vw - 375px) / (1440 - 375)));
  padding-left: calc(10px + (12.5 - 10) * ((100vw - 375px) / (1440 - 375)));
  @media (max-width: 960px) {
    display: flex;
    justify-content: center;
    align-items: center;
  }
`;
const Notice = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  font-family: "THICCCBOI-medium";
  font-size: 18px;
  color: #ffffff;
  @media (max-width: 960px) {
    padding-top: 15px;
  }
`;
const Ref = styled.div`
  text-decoration-line: underline;
  margin-top: 1px;
  color: #fc5842;
  line-height: 30px;
`;

export default ProductsPage;
