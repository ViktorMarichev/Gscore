import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import PrimaryButton from "@components/PrimaryButton";
import SecondaryButton from "@components/SecondaryButton";
import InputField from "@components/InputField";
import styles from "../styles/Home.module.css";
import styled from "styled-components";
import { useForm, Controller, SubmitHandler } from "react-hook-form";
const UIKitWrapper = styled.div`
  display: flex;
  width: 100%;
  background-color: gray;
  justify-content: flex-start;
  align-items: center;
  flex-direction: row;
  flex-wrap: wrap;
  padding: 10px;
`;
const UiKitColumn = styled.div`
  width: auto;
  box-sizing: border-box;
  margin-left: 5px;
`;
interface IFormInputs {
  firstName: string;
}
const Home: NextPage = () => {
  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInputs>({
    defaultValues: {
      firstName: "",
    },
  });

  const onSubmit: SubmitHandler<IFormInputs> = (data) => {
    alert("send " + JSON.stringify(data));
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <UIKitWrapper>
        <UiKitColumn>
          <PrimaryButton title="Default" loading={false} disabled={false} />
        </UiKitColumn>
        <UiKitColumn>
          <SecondaryButton title="Default" loading={false} disabled={false} />
        </UiKitColumn>
        <UiKitColumn>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Controller
              name="firstName"
              control={control}
              rules={{
                required: true,
                minLength: 5,
              }}
              render={({ field: { onChange, onBlur, value } }) => {
                return (
                  <InputField
                    name="firstName"
                    disabled={false}
                    placeholder="Placeholder"
                    onChange={onChange}
                    onBlur={onBlur}
                    errors={errors}
                    success={errors.firstName === undefined}
                    errorRender={() => {
                      switch (errors.firstName!.type) {
                        case "required":
                          return "This field is required";
                        case "minLength":
                          return "Too short";
                        default:
                          return "some error";
                      }
                    }}
                    value={value}
                    error="Some error"
                  />
                );
              }}
            />
          </form>
        </UiKitColumn>
      </UIKitWrapper>
    </div>
  );
};

export default Home;
